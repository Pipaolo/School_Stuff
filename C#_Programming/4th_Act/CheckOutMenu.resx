<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>